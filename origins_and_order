def answer(x,y,z):
	card_list = [x, y, z]
	month = [x for x in card_list if x <= 12]
	day = [x for x in card_list if x <= 31]
	year = [x for x in card_list if x % 4 != 0]
	date_matrix = [month, day, year]
	date_list = []

	#test
	print month
	print day
	print year 

	if len(month) == 1 or\
		len(day) == 1 or\
		len(year) == 1:
		#Loops through month, day, and year in date matrix.
		for i in range(3):
			if len(date_matrix[i]) == 1:
				date_list.insert(i, date_matrix[i][0])
			elif len(date_matrix[i]) == 2:
				if date_matrix[i][0] == date_matrix[i][1]:
					date_list.insert(0, date_matrix[i][0])
					date_list.insert(1, date_matrix[i][0])
				else:
					for card in date_matrix[i]:
						if card not in date_list:
							date_list.insert(i, card) 
			elif len(date_matrix[i]) == 3:
				if day == year:
					for card in date_matrix[i]:
						if card not in date_list:
							date_list.insert(1, card)
							date_list.insert(2, card)
							break
				else:
					for card in date_matrix[i]:
						if card not in date_list:
							date_list.insert(i, card)	
		print "string"
	elif sum(card_list)/3 == x:
		print "string" 
		for card in card_list:
			date_list.append(card)
	else:
		print "Ambiguous" #return ambiguous - will say in final 

	#test
	print date_list


	#For inserting "0" into m/d/y
	"""date_strings = [str(x) for x in date]
	#print date_strings
	for i in range(3):
		if len(date_strings[i]) == 1:
			date_strings[i] = "0" + date_strings[i]
	#return date_strings
	date_final = '/'.join(date_strings)
	if len(date_final) > 8:
		return "Ambiguous"
	else:
		return date_final"""


#print answer(2,30,3) #Ambiguous - works
print answer(19,19,3) #String
print answer(1,31,89)
print answer(8,16,25)
#print answer(80,12,12)
print answer(1,1,1) #String 
print answer(30,30,1)
#print answer(1,2,3) #Ambiguous - works 
print answer(2,25,20) #This isn't right #String
print answer(2,25,25) #String
#print answer(4,4,25) #This isn't right -works, for now 
#print answer(8,8,25) - works 




"""Unused Code
	#date_string = ",".join(str(x) for x in date)
	#return date_string 
	#date_numbers = tuple(date)
	#return date_numbers
	#d = datetime.date(date[2] + 2000, date[0], date[1])
	#return d.strftime("%m/%d/%y")
	#datetime.datetime(date[2] + 1900, date[0], date[1], 0, 0)
    #return datetime.strftime("%m/%d/%y")"""
	
